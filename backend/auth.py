
from database import users_db

from fastapi import APIRouter, HTTPException, Depends
from pydantic import BaseModel, field_validator
from passlib.context import CryptContext
from fastapi_jwt import JwtAccessBearer

router = APIRouter()
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fastapi-jwt –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ç–æ–∫–µ–Ω–∞–º–∏
jwt = JwtAccessBearer(secret_key="super-secret")


# –ú–æ–¥–µ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
class User(BaseModel):
    username: str
    password: str

    @field_validator("username")
    def validate_username(cls, v):
        if len(v) < 3:
            raise ValueError("–Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ –Ω–µ –º–µ–Ω—à–µ 3 —Å–∏–º–≤–æ–ª—ñ–≤")
        return v

    @field_validator("password")
    def validate_password(cls, v):
        if len(v) < 6:
            raise ValueError("–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –Ω–µ –º–µ–Ω—à–µ 6 —Å–∏–º–≤–æ–ª—ñ–≤")
        return v

class UserRegister(User):
    email: str

    @field_validator("email")
    def validate_email(cls, v):
        if "@" not in v or "." not in v:
            raise ValueError("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π email")
        return v

# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@router.post("/register")
async def register(user: UserRegister):
    if user.username in users_db:
        raise HTTPException(status_code=400, detail="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î")
    hashed_password = pwd_context.hash(user.password)
    users_db[user.username] = {"email": user.email, "password": hashed_password}
    return {"msg": "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞"}

# –õ–æ–≥—ñ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@router.post("/login")
async def login(user: User):
    if user.username not in users_db or not pwd_context.verify(user.password, users_db[user.username]["password"]):
        raise HTTPException(status_code=401, detail="–ù–µ–≤—ñ—Ä–Ω–∏–π –ª–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å")
    
    # üü¢ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞
    access_token = jwt.create_access_token(subject={"username": user.username})
    return {"access_token": access_token}

# –ó–∞—Ö–∏—â–µ–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç
@router.get("/protected")
async def protected(Authorize: JwtAccessBearer = Depends()):
    Authorize.jwt_required()
    user = Authorize.get_jwt_subject()
    return {"user": user}
