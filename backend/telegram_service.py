from telethon.tl.types import Dialog
from telethon.tl.patched import Message
from telethon.errors import SessionPasswordNeededError
from telegram_client import client  # üü¢ –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —î–¥–∏–Ω–∏–π client

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –∫–ª—ñ—î–Ω—Ç–∞
async def connect():
    if not client.is_connected():
        await client.connect()

    if not await client.is_user_authorized():
        print("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π.")
        raise Exception("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π —É Telegram")

# –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∫–æ–¥—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
async def send_code(phone: str):
    await connect()
    return await client.send_code_request(phone)

# –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∫–æ–¥—É
async def verify_code(phone: str, code: str):
    await connect()
    try:
        await client.sign_in(phone, code)
    except SessionPasswordNeededError:
        raise Exception("–ü–æ—Ç—Ä—ñ–±–µ–Ω –ø–∞—Ä–æ–ª—å –≤—ñ–¥ –¥–≤–æ—Ñ–∞–∫—Ç–æ—Ä–Ω–æ—ó –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó")

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É —á–∞—Ç—ñ–≤
async def get_chats():
    await connect()
    chats = await client.get_dialogs()
    return [{"id": chat.id, "title": chat.title} for chat in chats]

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É —á–∞—Ç—ñ
async def get_messages(chat_id: int):
    await connect()
    me = await client.get_me()
    messages = await client.get_messages(chat_id, limit=100)
    return [
        {
            "id": msg.id,
            "text": msg.text or "",
            "sender": msg.sender_id,
            "timestamp": msg.date.strftime("%H:%M") if msg.date else "",
            "isMine": msg.sender_id == me.id,
        }
        for msg in messages
    ]
